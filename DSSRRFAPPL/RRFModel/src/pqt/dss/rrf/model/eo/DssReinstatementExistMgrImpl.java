package pqt.dss.rrf.model.eo;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 10 16:55:38 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssReinstatementExistMgrImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ExistMgrIdPk,
        RrfIdFk,
        AgentNoFk,
        Code,
        MgrName,
        Designation,
        Doj,
        DsfStrength,
        AchievedCases,
        AchievedContribution,
        UserIdFk,
        EnterDate,
        LastUpdatedBy,
        LastUpdatedDate,
        DssReinstatementRequestForm;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EXISTMGRIDPK = AttributesEnum.ExistMgrIdPk.index();
    public static final int RRFIDFK = AttributesEnum.RrfIdFk.index();
    public static final int AGENTNOFK = AttributesEnum.AgentNoFk.index();
    public static final int CODE = AttributesEnum.Code.index();
    public static final int MGRNAME = AttributesEnum.MgrName.index();
    public static final int DESIGNATION = AttributesEnum.Designation.index();
    public static final int DOJ = AttributesEnum.Doj.index();
    public static final int DSFSTRENGTH = AttributesEnum.DsfStrength.index();
    public static final int ACHIEVEDCASES = AttributesEnum.AchievedCases.index();
    public static final int ACHIEVEDCONTRIBUTION = AttributesEnum.AchievedContribution.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int DSSREINSTATEMENTREQUESTFORM = AttributesEnum.DssReinstatementRequestForm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssReinstatementExistMgrImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.rrf.model.eo.DssReinstatementExistMgr");
    }


    /**
     * Gets the attribute value for ExistMgrIdPk, using the alias name ExistMgrIdPk.
     * @return the value of ExistMgrIdPk
     */
    public Number getExistMgrIdPk() {
        return (Number) getAttributeInternal(EXISTMGRIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExistMgrIdPk.
     * @param value value to set the ExistMgrIdPk
     */
    public void setExistMgrIdPk(Number value) {
        setAttributeInternal(EXISTMGRIDPK, value);
    }

    /**
     * Gets the attribute value for RrfIdFk, using the alias name RrfIdFk.
     * @return the value of RrfIdFk
     */
    public Number getRrfIdFk() {
        return (Number) getAttributeInternal(RRFIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for RrfIdFk.
     * @param value value to set the RrfIdFk
     */
    public void setRrfIdFk(Number value) {
        setAttributeInternal(RRFIDFK, value);
    }

    /**
     * Gets the attribute value for AgentNoFk, using the alias name AgentNoFk.
     * @return the value of AgentNoFk
     */
    public Number getAgentNoFk() {
        return (Number) getAttributeInternal(AGENTNOFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for AgentNoFk.
     * @param value value to set the AgentNoFk
     */
    public void setAgentNoFk(Number value) {
        setAttributeInternal(AGENTNOFK, value);
    }

    /**
     * Gets the attribute value for Code, using the alias name Code.
     * @return the value of Code
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Code.
     * @param value value to set the Code
     */
    public void setCode(String value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for MgrName, using the alias name MgrName.
     * @return the value of MgrName
     */
    public String getMgrName() {
        return (String) getAttributeInternal(MGRNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for MgrName.
     * @param value value to set the MgrName
     */
    public void setMgrName(String value) {
        setAttributeInternal(MGRNAME, value);
    }

    /**
     * Gets the attribute value for Designation, using the alias name Designation.
     * @return the value of Designation
     */
    public String getDesignation() {
        return (String) getAttributeInternal(DESIGNATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Designation.
     * @param value value to set the Designation
     */
    public void setDesignation(String value) {
        setAttributeInternal(DESIGNATION, value);
    }

    /**
     * Gets the attribute value for Doj, using the alias name Doj.
     * @return the value of Doj
     */
    public Date getDoj() {
        return (Date) getAttributeInternal(DOJ);
    }

    /**
     * Sets <code>value</code> as the attribute value for Doj.
     * @param value value to set the Doj
     */
    public void setDoj(Date value) {
        setAttributeInternal(DOJ, value);
    }

    /**
     * Gets the attribute value for DsfStrength, using the alias name DsfStrength.
     * @return the value of DsfStrength
     */
    public String getDsfStrength() {
        return (String) getAttributeInternal(DSFSTRENGTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for DsfStrength.
     * @param value value to set the DsfStrength
     */
    public void setDsfStrength(String value) {
        setAttributeInternal(DSFSTRENGTH, value);
    }

    /**
     * Gets the attribute value for AchievedCases, using the alias name AchievedCases.
     * @return the value of AchievedCases
     */
    public String getAchievedCases() {
        return (String) getAttributeInternal(ACHIEVEDCASES);
    }

    /**
     * Sets <code>value</code> as the attribute value for AchievedCases.
     * @param value value to set the AchievedCases
     */
    public void setAchievedCases(String value) {
        setAttributeInternal(ACHIEVEDCASES, value);
    }

    /**
     * Gets the attribute value for AchievedContribution, using the alias name AchievedContribution.
     * @return the value of AchievedContribution
     */
    public String getAchievedContribution() {
        return (String) getAttributeInternal(ACHIEVEDCONTRIBUTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for AchievedContribution.
     * @param value value to set the AchievedContribution
     */
    public void setAchievedContribution(String value) {
        setAttributeInternal(ACHIEVEDCONTRIBUTION, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * @return the associated entity DssReinstatementRequestFormImpl.
     */
    public DssReinstatementRequestFormImpl getDssReinstatementRequestForm() {
        return (DssReinstatementRequestFormImpl) getAttributeInternal(DSSREINSTATEMENTREQUESTFORM);
    }

    /**
     * Sets <code>value</code> as the associated entity DssReinstatementRequestFormImpl.
     */
    public void setDssReinstatementRequestForm(DssReinstatementRequestFormImpl value) {
        setAttributeInternal(DSSREINSTATEMENTREQUESTFORM, value);
    }


    /**
     * @param existMgrIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number existMgrIdPk) {
        return new Key(new Object[] { existMgrIdPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
                  super.create(attributeList);
                  Date currentDate = new Date();
                  setEnterDate((Date) currentDate.getCurrentDate());
                  setLastUpdatedDate((Date) currentDate.getCurrentDate());
                  SequenceImpl seq = new SequenceImpl("DSS_REINSTATEMENT_MGR_SEQ", getDBTransaction());
                  setExistMgrIdPk(seq.getSequenceNumber());
                  FacesContext fctx = FacesContext.getCurrentInstance();
                  ExternalContext ectx = fctx.getExternalContext();
                  HttpSession userSession = (HttpSession) ectx.getSession(false);
                  try {
                      setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                      setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
                  } catch (SQLException ex) {
                      setUserIdFk(new Number(0));
                      setLastUpdatedBy(new Number(0));
                  }
              
              }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */

    protected void doDML(int operation, TransactionEvent e) {
        Date currentDate = new Date();
        if (operation == DML_UPDATE) {
            setLastUpdatedDate((Date) currentDate.getCurrentDate());
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession) ectx.getSession(false);
            try {
                setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
            } catch (SQLException ex) {
                setUserIdFk(new Number(0));
                setLastUpdatedBy(new Number(0));
            }
        }
        super.doDML(operation, e);
    }
    }

